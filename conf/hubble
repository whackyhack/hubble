#################################
## GitFS Config
#################################
##
## Hubble doesn't ship with profiles. To get the default profiles, you can
## subscribe via GitFS to the hubblestack_data repo. You must also have either
## python-gitpython or python-pygit2 installed. (python-pygit2 is recommended
## if available

gitfs_remotes:
  - https://github.com/hubblestack/hubblestack_data.git
## To use locally stored hubblestack_data, comment out gitfs_remote section,
## then uncomment the following. It's also possible to use both.
# file_roots:
#   base:
#     - /srv/hubble
## In the above example, hubble will look for files in /srv/hubble, falling
## back to the hubblestack_data git repo if it can't find the file for
## which it is looking.
## If multiple backends are used those listed first take precedence.
fileserver_backend:
  - roots
  - git

## If the ip_gw grains is defined and False, meaning there is no default
## gateway defined, fall back to these fileserver backends. This will allow
## for easy fallback from, for example, azure blob storage to git repos in
## the data center
#fallback_fileserver_backend:
#  - roots
#  - git

#################################
## Scheduler Config
#################################
##
## Hubble has a basic scheduler which can be used to schedule jobs at various
## intervals (defined by the `seconds` argument), with optional splay.
##
## Below is a sample schedule for all of the modules includedin hubble

#schedule:
#  audit_daily:
#    function: hubble.audit
#    seconds: 86400
#    min_splay: 1800   # due to this min_splay, audit will run 30 to 60 minutes
#    splay: 3600       # after hubble service starts
#    kwargs:
#      verbose: True
#    returner: splunk_nova_return
#    run_on_start: False
#  fdg_top:
#    function: fdg.top
#    seconds: 86400
#    splay: 3600
#    returner: splunk_fdg_return
#    run_on_start: True
#  nebula_fifteen_min:
#    function: nebula.queries
#    seconds: 900
#    splay: 300
#    args:
#      - fifteen_min
#    returner: splunk_nebula_return
#    run_on_start: False
#  nebula_hour:
#    function: nebula.queries
#    seconds: 3600
#    splay: 900
#    args:
#      - hour
#    returner: splunk_nebula_return
#    run_on_start: False
#  nebula_day:
#    function: nebula.queries
#    seconds: 86400
#    splay: 3600
#    args:
#      - day
#    returner: splunk_nebula_return
#    run_on_start: False
#  nebula_osqueryd_monitor:
#    function: nebula.osqueryd_monitor
#    seconds: 300
#    splay: 10
#    kwargs:
#      configfile: /path/to/confbase/osquery/osquery.conf
#      flagfile: /path/to/confbase/osquery/osquery.flags
#      logdir: /var/log/hubble_osquery
#      databasepath: /var/cache/hubble/osquery
#      pidfile: /var/run/hubble_osquery/osquery.pidfile
#      hashfile: /var/cache/hubble/osquery/hash_of_flagfile.txt
#    run_on_start: True
#  nebula_osqueryd_log_parser:
#    function: nebula.osqueryd_log_parser
#    seconds: 300
#    splay: 10
#    kwargs:
#      osqueryd_logdir: /var/log/hubble_osquery
#      backuplogdir: /var/log/hubble_osquery/backuplogs
#      maxlogfilesizethreshold: 1000000
#      logfilethresholdinbytes: 100000
#      enablediskstatslogging: True
#      backuplogfilescount: 5
#      mask_passwords: True
#    returner: splunk_osqueryd_return
#    run_on_start: True
#  nebula_osquery_extensions:
#    function: nebula.extensions
#    seconds: 86400
#    splay: 3600
#    run_on_start: True
#  pulsar:
#    function: pulsar.process
#    seconds: 1
#    returner: splunk_pulsar_return
#    run_on_start: True
#  pulsar_canary:
#    function: pulsar.canary
#    seconds: 86400
#    run_on_start: True
#  conf_publisher:
#    function: conf_publisher.publish
#    seconds: 86400
#    splay: 3600
#    run_on_start: False

#################################
## Returner Config
#################################
##
## In order for the sample scheduler config to work, you must configure the
## returners which are being used. In the case of the Splunk returners, you
## must add index, token, and endpoint information

#hubblestack:
#  returner:
#    splunk:
#      - token: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
#        indexer: splunk-indexer.domain.tld
#        index: hubble
#        add_query_to_sourcetype: True  # Separate nebula sourcetype per query
#        sourcetype_nova: hubble_audit
#        sourcetype_nebula: hubble_osquery
#        sourcetype_osqueryd: hubble_osqd
#        sourcetype_pulsar: hubble_fim
#        sourcetype_log: hubble_log
#splunklogging: True
#splunk_index_extracted_fields: []

#Set log level
log_level: info

## If you are instead using the slack returner, you'll need a block similar to
## this:

#slack_pulsar:
#  as_user: true
#  username: calculon
#  channel: channel
#  api_key: xoxb-xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxx

########################################################
## For fetching local salt custom grains and pillar data
########################################################

#custom_grains_pillar:
#  grains:
#    - selinux: selinux:enabled
#    - release: osrelease
#  pillar:
#    - ntpserver: network_services:ntpserver
